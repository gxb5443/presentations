package main

import (
	"context"
	"log"
	"net"

	pb "go.jet.network/phaser/core-service/proto"
	"google.golang.org/grpc"
)

// START OMIT
type PhaserServer struct{}

// Assign Stub
func (ps *PhaserServer) Assign(ctx context.Context,
	req *pb.AssignmentRequest) (*pb.PhaserResponse, error) {
	pd := "Some Phaser Assignment"
	return &pb.PhaserResponse{DrOHeader: pd}, nil
}

func main() {
	lis, err := net.Listen("tcp", ":8080")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}
	s := grpc.NewServer()

	// this will satisfy the interface laid out in pb.go file
	var ps *PhaserServer
	// Defined in Autogenerated pb.go file
	pb.RegisterCoreServer(s, ps)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}

// END OMIT
