PGConf US 2016
Pub/Sub with Postgresql
19 Apr 2016

Gian Biondi
Network Security Software Engineer, DoubleVerify
gianbiondijr@gmail.com
@gianbiondi

* Outline

- Pub/Sub Description
- Postgres Implementation
- Example application

* Pub/Sub

* What Is Pub/Sub?

- Short for _Publish-Subscribe_
- Messaging Pattern - Network-oriented architecture which describes how multiple processes communicate
- Asynchronous Communication
- Similar to Message Queue
- Publisher = Origin of Message
- Subscribers = Receivers of Messages
- Publishers and Subscribers decoupled

* Decoupled?

- Publishers do not directly communicate with Subscribers
- Publishers generate a message on a channel
- Subscribers express interest in one-or-more channels and only receive messages on those channels
# Image about Publishers and subscribers not caring about each other

* Block-Level Diagram

.image ./images/pubsub.png

* Postgres Implements Pub/Sub!

# Add wow gif or something
.image ./images/pg.jpg
.image ./images/wow.gif

* NOTIFY

  NOTIFY channel [, payload];

  pg_notify(text, text);

- Simple, inter-process communication mechanism for a set of processes accessing the same database.
- Sends event with optional payload string
- Exectuted on Trigger commit (rolled-back transactions don't produce events)
- Order of messages is guaranteed

* NOTIFY Example

  LISTEN bar;
  NOTIFY bar;
  Asynchronous notification "bar" received from server process with PID 8448.
  NOTIFY bar, 'This is the payload';
  Asynchronous notification "bar" with payload "This is the payload" received from server process with PID 8448.

  LISTEN foo;
  SELECT pg_notify('fo' || 'o', 'pay' || 'load');
  Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.

* LISTEN
  
  LISTEN channel;

- Registers session as listener on channel
- Sessions register exactly once
- Postgres notifies session and session notifies client
- If listener is mid-trigger, event is not delivered until that trigger either commits or aborts
- Unregister with `UNLISTEN`
- Registrations are automatically cleaned up when session ends

* LISTEN Example

  LISTEN foo;
  NOTIFY foo;
  Asynchronous notification "foo" received from server process with PID 8448.

* Caveat: Message Queue

- Built-in message queue for messages sent but not delivered to all subscribers
- 8GB default size
- If a listener enters a transaction, Postgres can't clean out the queue
- When queue hits 50% capacity, throws log warnings with PID of offending listener
- When queue is full, NOTIFY fails

* Possible Applications
- New User emailer
- Cache Managment

* Time for some code
.image images/code.gif _ 600

* Problem Description

- Datastore Service
- A distributed application with single PostgreSQL Backend
- The application stores data in normalized log format
- Application runs reports with dynamic field types with performance requirements

.image images/serverstructure.png 450 _

* Technology Used

- [[http://golang.org][Golang]] 
- [[https://godoc.org/github.com/lib/pq][Go pq library]]
- [[http://www.postgresql.org/][Postgresql]] 

* Field Table

  CREATE TABLE IF NOT EXISTS fields (
    id uuid PRIMARY KEY not null default uuid_generate_v4(),
    object_type_id uuid references object_types(id),
    title text not null,
    value_type integer
  );

* Field Table Example
  
  id                                   | object_type_id                       | title           | value_type
  ----------------------------------------------------------------------------------------------------------
  0a872f8f-0a90-4e47-9242-ed92a881831f | 069c5cf0-905f-4d14-8e98-752818c6bcaa | "first_name"    | 0
  84dbde06-6fdb-4fe9-b55b-298adb22d6ea | 069c5cf0-905f-4d14-8e98-752818c6bcaa | "last_name"     | 0
  6c7a0b98-98b3-4487-b72a-908a6865b187 | 069c5cf0-905f-4d14-8e98-752818c6bcaa | "age"           | 1
  dcfa643e-a8d5-452c-9fab-023f54bb4cda | 1259ae73-5dcd-4b3e-8211-db09cafa34c3 | "fav_ice_cream" | 0

* Log Table Structure

  CREATE TABLE IF NOT EXISTS transactions (
    field_id uuid references fields(id),
    value text,
    created timestamp without time zone default(now() at time zone 'utc')
  );

* Log Table Example

  field_id                             | value          | created
  ---------------------------------------------------------------
  0a872f8f-0a90-4e47-9242-ed92a881831f | "Gian"         | '2016-04-19 00:00:00'
  84dbde06-6fdb-4fe9-b55b-298adb22d6ea | "Biondi"       | '2016-04-19 00:00:00'
  6c7a0b98-98b3-4487-b72a-908a6865b187 | "27"           | '2016-04-19 00:00:00'
  dcfa643e-a8d5-452c-9fab-023f54bb4cda | "Vanilla"      | '2016-04-19 00:00:00'

* NOTIFY Trigger

  CREATE OR REPLACE FUNCTION field_notify() RETURNS trigger AS $$
  DECLARE
    payload varchar;
  BEGIN
      payload = CAST(NEW.id AS text) || 
        ', ' || CAST(NEW.object_type_id AS text) || 
        ', ' || NEW.title ||
        ', ' || CAST(NEW.value_type AS text);
      PERFORM pg_notify('new_field', payload);
      RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  CREATE TRIGGER field_insert
  AFTER INSERT
  ON fields
  FOR EACH ROW
    EXECUTE PROCEDURE field_notify();

* Go Driver Code

.code -numbers driver.go /START OMIT/,/END OMIT/

* Go Cache Code

.code -numbers updateCache.go /START OMIT/,/END OMIT/

* Possible Issues 
- Message Queue filling up with long transactions
- Messages are only delivered between transactions, instead of happening immediately
