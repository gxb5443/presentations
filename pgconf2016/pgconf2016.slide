PGConf US 2016
Pub/Sub with Postgresql
19 Apr 2016

Gian Biondi
Network Security Software Engineer, DoubleVerify
gianbiondijr@gmail.com
@gianbiondi

* Outline

- Pub/Sub Description
- Postgres Implementation
- Example application

* Pub/Sub

* What Is Pub/Sub?
- Short for `Publisher-Subscriber`
- Messaging Pattern - Network-oriented architecture which describes how multiple processes communicate
- Publishers = Origin of Message
- Subscribers = Receivers of Messages
- Publishers and Subscribers decoupled

* Decoupled?
- Publishers generate a message on a channel
- Subscribers express interest in one-or-more channels and only receive messages on those channels
- Publishers do not directly communicate with Subscribers
# Image about Publishers and subscribers not caring about each other

* Block-Level Diagram
# Diagram here

* Postgres Implements Pub/Sub!
# Add wow gif or something
.image ./images/pg.jpg

* Notify
  NOTIFY channel [, payload]
- Simple, inter-process communication mechanism for a set of processes accessing the same database.
- Sends event with optional payload string
- Exectuted on Trigger commit (rolled back transactions don't produce events)
- If listener is mid-trigger, event is not delivered until that trigger either commits or aborts
- Order of messages is guaranteed

* Notify
  LISTEN virtual;
  NOTIFY virtual;
  Asynchronous notification "virtual" received from server process with PID 8448.
  NOTIFY virtual, 'This is the payload';
  Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

  LISTEN foo;
  SELECT pg_notify('fo' || 'o', 'pay' || 'load');
  Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.
