PGConf US 2016
Pub/Sub with Postgresql
19 Apr 2016

Gian Biondi
Network Security Software Engineer, DoubleVerify
gianbiondijr@gmail.com
@gianbiondi

* Outline

- Pub/Sub Description
- Postgres Implementation
- Example application

* Pub/Sub

* What Is Pub/Sub?

- Short for `Publisher-Subscriber`
- Messaging Pattern - Network-oriented architecture which describes how multiple processes communicate
- Publishers = Origin of Message
- Subscribers = Receivers of Messages
- Publishers and Subscribers decoupled

* Decoupled?

- Publishers generate a message on a channel
- Subscribers express interest in one-or-more channels and only receive messages on those channels
- Publishers do not directly communicate with Subscribers
# Image about Publishers and subscribers not caring about each other

* Block-Level Diagram

.image ./images/pubsub.png

* Postgres Implements Pub/Sub!

# Add wow gif or something
.image ./images/pg.jpg
.image ./images/wow.gif

* NOTIFY

  NOTIFY channel [, payload];

  pg_notify(text, text);

- Simple, inter-process communication mechanism for a set of processes accessing the same database.
- Sends event with optional payload string
- Exectuted on Trigger commit (rolled back transactions don't produce events)
- Order of messages is guaranteed

* NOTIFY Example

  LISTEN virtual;
  NOTIFY virtual;
  Asynchronous notification "virtual" received from server process with PID 8448.
  NOTIFY virtual, 'This is the payload';
  Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

  LISTEN foo;
  SELECT pg_notify('fo' || 'o', 'pay' || 'load');
  Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.

* LISTEN
  
  LISTEN channel;

- Registers session as listener on channel
- Sessions register exactly once
- Postgres notifies session and session notifies client
- If listener is mid-trigger, event is not delivered until that trigger either commits or aborts
- Unregister with `UNLISTEN`
- Registrations are automatically cleaned up when session ends

* LISTEN Example

  LISTEN virtual;
  NOTIFY virtual;
  Asynchronous notification "virtual" received from server process with PID 8448.

* Message Queue

- Built-in message queue for messages not yet processed
- 8GB default size
- If a listener enters a transaction, Postgres can't clean out the queue
- When queue hits 50% capacity, throws log warnings with PID of offending listener

* Time for some code
.image images/code.gif _ 600

* Problem Description

- A distributed web application with DBaaS PostgreSQL Backend
- The application stores data in normalized log format
- Application runs reports with dynamic field types with performance requirements

.image images/serverstructure.png 450 _

* Technology Used

- [[http://golang.org][Golang]] 
- [[http://www.postgresql.org/][Postgresql]] 

* Field Table

  CREATE TABLE IF NOT EXISTS fields (
    id uuid PRIMARY KEY not null default uuid_generate_v4(),
    object_type_id uuid references object_types(id),
    title text not null,
    value_type integer
  );

* Log Table Structure

  CREATE TABLE IF NOT EXISTS transactions (
    field_id uuid references fields(id),
    value text,
    created timestamp without time zone default(now() at time zone 'utc')
  );

* NOTIFY Trigger

  CREATE OR REPLACE FUNCTION field_notify() RETURNS trigger AS $$
  DECLARE
    payload varchar;
  BEGIN
      payload = CAST(NEW.id AS text) || 
        ', ' || CAST(NEW.object_type_id AS text) || 
        ', ' || NEW.title ||
        ', ' || CAST(NEW.value_type AS text);
      PERFORM pg_notify('new_field', payload);
      RETURN NEW;
  END;

  CREATE TRIGGER field_insert
  AFTER INSERT
  ON fields
  FOR EACH ROW
    EXECUTE PROCEDURE field_notify();

* Go Driver Code

.code -numbers driver.go /START OMIT/,/END OMIT/

* Go Cache Code

.code -numbers updateCache.go /START OMIT/,/END OMIT/

* Possible Issues
- Message Queue filling up with long transactions
- Messages are only delivered between transactions, instead of happening immediately
